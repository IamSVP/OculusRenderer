CMAKE_MINIMUM_REQUIRED(VERSION 3.2 FATAL_ERROR)
PROJECT(OculusRenderer CXX C)

find_package(OpenGL REQUIRED)

SET(OculusRenderer_MAJOR_VERSION 0)
SET(OculusRenderer_MINOR_VERSION 0)
SET(OculusRenderer_PATCH_VERSION 1)
SET(OculusRenderer_VERSION ${OculusRenderer_MAJOR_VERSION}.${OculusRenderer_MINOR_VERSION}.${OculusRenderer_PATCH_VERSION})
set_property(GLOBAL PROPERTY USE_FOLDERS ON)

OPTION(TREAT_WARNINGS_AS_ERRORS "Treat compiler warnings as errors. We use the highest warnings levels for compilers." OFF)

IF(MSVC)
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
	SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS}")

ELSEIF(CMAKE_COMPILER_IS_GNUCC OR CMAKE_COMPILER_IS_GNUCXX)

  SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wall -fms-extensions")
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -fms-extensions")

ENDIF(MSVC)

IF(TREAT_WARNINGS_AS_ERRORS)
  IF(MSVC)
    SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /WX")
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /WX")
  ELSEIF(CMAKE_COMPILER_IS_GNUCC OR CMAKE_COMPILER_IS_GNUCXX)
    SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Werror")
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Werror")
  ENDIF(MSVC)
ENDIF(TREAT_WARNINGS_AS_ERRORS)

SET(CMAKE_MODULE_PATH "${OculusRenderer_SOURCE_DIR}/CMakeModules" ${CMAKE_MODULE_PATH})
SET(CMAKE_CXX_STANDARD 11)

ADD_SUBDIRECTORY(libs)
ADD_SUBDIRECTORY(GenTC)
ADD_SUBDIRECTORY(OculusSDK)
ADD_SUBDIRECTORY(VideoDecoding)
ADD_SUBDIRECTORY(Renderer)